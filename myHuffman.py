# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import (Qt, pyqtSignal, pyqtSlot, QThread, QTimer)
from PyQt5.QtWidgets import QWidget
from PyQt5.QtGui import (QMovie, QIcon, QCursor)
from PyQt5.QtWidgets import (QMainWindow, QApplication, QVBoxLayout, QLabel,
                             QTabWidget, QPushButton, QHBoxLayout, QPlainTextEdit,
                             QFileDialog, QDesktopWidget, QDialog, QProgressBar)
import images_rc  # 加载图片资源文件
import sys
import os
import time
import huffman
from huffman import HuffmanEncoder


class Ui_MainWindow(QTabWidget):
    def __init__(self, parent=None):
        super(Ui_MainWindow, self).__init__(parent)
        self.setupUi()

    def setupUi(self):
        self.setGeometry(0, 0, 550, 550)
        self.setFixedSize(550, 550)
        self.tab1 = QWidget()
        self.tab2 = QWidget()
        self.addTab(self.tab1, '压缩')
        self.addTab(self.tab2, '解压')
        self.setWindowTitle('Huffman压缩-解压')
        self.setWindowIcon(QIcon(':/image/bird.ico'))
        self.loadpath = ''  # 导入文件路径
        # 控件样式定义
        self.style = '''
                    #btn_code{
                        border-radius: 4px;
                        border-image: url(':/image/code.png');
                        }
                    #btn_code:Pressed{
                        border-image: url(':/image/code_press.png');
                        }
    
                    #btn_select_file1{
                        border-radius: 4px;
                        border-image: url(':/image/sele_file.png');
                        }
                    #btn_select_file1:Pressed{
                        border-image: url(':/image/sele_file_press.png');
                        }
                    #btn_select_file2{
                        border-radius: 4px;
                        border-image: url(':/image/sele_file.png');
                        }
                    #btn_select_file2:Pressed{
                        border-image: url(':/image/sele_file_press.png');
                        }
                    #btn_decode{
                                border-radius: 4px;
                                border-image: url(':/image/decode.png');
                        }
                    #btn_decode:Pressed{
                        border-image: url(':/image/decode_press.png');
                        }  
                    #dir_edit1{
                        background-color: rgba(255, 255, 255, 0);
                        font-family:微软雅黑;
                        font-size:14px
                        }
                    #dir_edit2{
                        background-color: rgba(255, 255, 255, 0);
                        font-family:微软雅黑;
                        font-size:14px
                        }
                    #btn_change_dir1{
                        border-radius: 4px;
                        border-image: url(':/image/change_dir.png');
                        }
                    #btn_change_dir1:Pressed{
                        border-image: url(':/image/change_dir_press.png');
                        }
                    #btn_change_dir2{
                        border-radius: 4px;
                        border-image: url(':/image/change_dir.png');
                        }
                    #btn_change_dir2:Pressed{
                        border-image: url(':/image/change_dir_press.png');
                        }
                '''
        self.tab1UI()  # 压缩标签页初始化
        self.tab2UI()  # 解压标签页初始化
        self.center()

    def center(self):  # 窗口居中函数
        screen = QDesktopWidget().screenGeometry()
        size = self.geometry()
        self.move((screen.width() - size.width()) / 2,
                  (screen.height() - size.height()) / 2)

    def tab1UI(self):
        # 动态背景
        self.gif = QMovie(':/image/bgi.gif')
        label = QLabel(self.tab1)
        label.setMovie(self.gif)
        label.setFixedSize(550, 550)
        label.setContentsMargins(0, 0, 0, 0)
        # 标题
        label_title = QLabel(self.tab1)
        label_title.setGeometry(0, 0, 400, 50)
        label_title.setPixmap(QtGui.QPixmap(':/image/title.png'))
        label_title.setScaledContents(True)
        # 开始压缩按钮
        btn_code = QPushButton(self.tab1)
        btn_code.setGeometry(350, 420, 170, 55)
        btn_code.setObjectName('btn_code')
        btn_code.setStyleSheet(self.style)
        btn_code.setCursor(QCursor(Qt.PointingHandCursor))
        btn_code.clicked.connect(self.start_coding)  # 连接槽函数

        # 操作区域布局
        menu_layout = QVBoxLayout()
        # 选择文件按钮
        select_file_layout = QHBoxLayout()
        btn_select_file1 = QPushButton()
        btn_select_file1.setObjectName('btn_select_file1')
        btn_select_file1.setGeometry(0, 0, 120, 35)
        btn_select_file1.setFixedSize(120, 35)
        btn_select_file1.setStyleSheet(self.style)
        btn_select_file1.setCursor(QCursor(Qt.PointingHandCursor))
        btn_select_file1.clicked.connect(self.select_file)

        label_filename = QLabel('filename')
        label_filename.setObjectName('label_filename')
        label_filename.setGeometry(0, 0, 120, 35)
        label_filename.setFixedHeight(35)
        select_file_layout.addWidget(btn_select_file1)
        select_file_layout.addWidget(label_filename, Qt.AlignRight)
        select_file_layout.setContentsMargins(0, 0, 0, 20)
        self.label_filename1 = label_filename  # 为了回调函数调用存在类变量里面
        # 载入文件子布局
        load_file_layout = QHBoxLayout()
        # “压缩到“子控件
        dir_to_code = QLabel()
        dir_to_code.setFixedSize(95, 35)
        dir_to_code.setPixmap(QtGui.QPixmap(':/image/code_to_dir.png'))
        dir_to_code.setScaledContents(True)
        # ”输入路径“子控件
        dir_edit1 = QPlainTextEdit()
        dir_edit1.setObjectName('dir_edit1')
        dir_edit1.setFixedHeight(35)
        dir_edit1.setObjectName('dir_edit1')
        dir_edit1.setStyleSheet(self.style)
        self.dir_edit1 = dir_edit1
        # "更改路径"子控件
        btn_change_dir1 = QPushButton()
        btn_change_dir1.setObjectName('btn_change_dir1')
        btn_change_dir1.setFixedSize(120, 35)
        btn_change_dir1.setStyleSheet(self.style)
        btn_change_dir1.setCursor(QCursor(Qt.PointingHandCursor))
        btn_change_dir1.clicked.connect(self.change_directory)
        self.btn_change_dir1 = btn_change_dir1
        # 子控件加入子布局(水平布局)
        load_file_layout.addWidget(dir_to_code)
        load_file_layout.addWidget(dir_edit1)
        load_file_layout.addWidget(btn_change_dir1)
        load_file_layout.setContentsMargins(0, 0, 0, 20)
        # 选择文件按钮布局
        choose_file = QWidget()
        choose_file.setGeometry(0, 35, 200, 35)
        choose_file.setFixedSize(200, 35)
        choose_file.setLayout(select_file_layout)
        # 子布局和load_file子控件结合
        load_file = QWidget()
        load_file.setGeometry(0, 35, 540, 35)
        load_file.setFixedSize(540, 35)
        load_file.setLayout(load_file_layout)
        # 子控件载入布局
        menu_layout.addWidget(choose_file)
        menu_layout.addWidget(load_file)
        # 纵向控件，包含选择文件按钮和路径输入框等
        menu = QWidget(self.tab1)
        menu.setGeometry(-10, 50, 540, 100)
        menu.setFixedSize(540, 100)
        menu.setLayout(menu_layout)
        self.gif.start()

    def tab2UI(self):
        # 动态背景
        self.gif = QMovie(':/image/bgi3.gif')
        label = QLabel(self.tab2)
        label.setMovie(self.gif)
        label.setFixedSize(550, 550)
        label.setContentsMargins(0, 0, 0, 0)
        # 标题
        label_title = QLabel(self.tab2)
        label_title.setGeometry(0, 0, 400, 50)
        label_title.setPixmap(QtGui.QPixmap(':/image/title2.png'))
        label_title.setScaledContents(True)
        # 开始解压缩按钮
        btn_decode = QPushButton(self.tab2)
        btn_decode.setGeometry(350, 420, 170, 55)
        btn_decode.setObjectName('btn_decode')
        btn_decode.setStyleSheet(self.style)
        btn_decode.setCursor(QCursor(Qt.PointingHandCursor))
        btn_decode.clicked.connect(self.start_decoding)  # 解压按钮的信号连接到解压按钮的槽函数
        # 操作区域布局
        menu_layout = QVBoxLayout()
        # 选择文件按钮
        select_file_layout = QHBoxLayout()
        btn_select_file2 = QPushButton()
        btn_select_file2.setObjectName('btn_select_file2')
        btn_select_file2.setGeometry(0, 0, 120, 35)
        btn_select_file2.setFixedSize(120, 35)
        btn_select_file2.setStyleSheet(self.style)
        btn_select_file2.setCursor(QCursor(Qt.PointingHandCursor))
        btn_select_file2.clicked.connect(self.select_file)  # 选择文件信号连接到选择文件槽函数

        label_filename = QLabel('filename')
        label_filename.setObjectName('label_filename')
        label_filename.setGeometry(0, 0, 120, 35)
        label_filename.setFixedHeight(35)
        select_file_layout.addWidget(btn_select_file2)
        select_file_layout.addWidget(label_filename, Qt.AlignRight)
        select_file_layout.setContentsMargins(0, 0, 0, 20)
        self.label_filename2 = label_filename
        # 载入文件子布局
        load_file_layout = QHBoxLayout()
        # “解压缩到“子控件
        dir_to_decode = QLabel()
        dir_to_decode.setFixedSize(95, 35)
        dir_to_decode.setPixmap(QtGui.QPixmap(':/image/decode_to_dir.png'))
        dir_to_decode.setScaledContents(True)
        # ”输入路径“子控件
        dir_edit2 = QPlainTextEdit()
        dir_edit2.setFixedHeight(35)
        dir_edit2.setObjectName('dir_edit2')
        dir_edit2.setStyleSheet(self.style)
        self.dir_edit2 = dir_edit2
        # "更改路径"子控件
        btn_change_dir2 = QPushButton()
        btn_change_dir2.setObjectName('btn_change_dir2')
        btn_change_dir2.setFixedSize(120, 35)
        btn_change_dir2.setStyleSheet(self.style)
        btn_change_dir2.setCursor(QCursor(Qt.PointingHandCursor))
        btn_change_dir2.clicked.connect(self.change_directory)  # 更换目录按钮的信号连接到更换目录的槽函数
        self.btn_change_dir2 = btn_change_dir2
        # 子控件加入子布局(水平布局)
        load_file_layout.addWidget(dir_to_decode)
        load_file_layout.addWidget(dir_edit2)
        load_file_layout.addWidget(btn_change_dir2)
        load_file_layout.setContentsMargins(0, 0, 0, 20)
        # 子布局和load_file子控件结合
        load_file = QWidget()
        load_file.setGeometry(0, 35, 540, 35)
        load_file.setFixedSize(540, 35)
        load_file.setLayout(load_file_layout)
        # 选择文件按钮布局
        choose_file = QWidget()
        choose_file.setGeometry(0, 35, 200, 35)
        choose_file.setFixedSize(200, 35)
        choose_file.setLayout(select_file_layout)
        # 子控件载入布局
        menu_layout.addWidget(choose_file)
        menu_layout.addWidget(load_file)
        # 纵向控件，包含选择文件按钮和路径输入框等
        menu = QWidget(self.tab2)
        menu.setGeometry(-10, 50, 540, 100)
        menu.setFixedSize(540, 100)
        menu.setLayout(menu_layout)
        self.gif.start()

    # 开始压缩按钮回调
    def start_coding(self):
        if not os.path.isdir(
                self.dir_edit1.toPlainText().replace(
                    self.label_filename1.text().split('.')[0] + '.huf', '')
        ):
            self.notify = Notification(message=True)  # 提示路径错误
            self.notify.show()
        else:
            self.notify = Notification()  # 加载进度提示窗口
            self.notify.show()
            print('开始压缩')
            print(self.dir_edit1.toPlainText())  # 打印路径
            print(self.label_filename1.text())  # 打印文件名，调试用
            filepath = self.dir_edit1.toPlainText().split('.')[0] + '.huf'  # 提取保存路径
            self.mythread = encode_thread(self.loadpath, filepath)  # 子线程对象实例化，默认是压缩
            self.mythread.update_progress.connect(self.update_progress)  # 子线程进度更新信号连接槽函数
            self.mythread.finished.connect(self.notice_finished)  # 子线程任务完成信号连接槽函数
            try:
                self.mythread.start()  # 开启子线程，进行压缩
            except:
                self.notify = Notification(message=True)
                self.notify.show()

    def update_progress(self, value):
        print("this is amazing:", value, '%')
        self.notify.setProgress(value)  # 更新进度条值
        QApplication.processEvents()  # 立即刷新

    def notice_finished(self):
        self.notify.close()  # 任务完成把进度加载界面关闭
        self.notify = Notification(message=True, text='任务完成！！')  # 出现任务完成提示框
        self.notify.show()

    # 开启解压回调函数
    def start_decoding(self):
        if not os.path.isdir(self.dir_edit2.toPlainText()):
            self.notify = Notification(message=True)
            self.notify.show()
        else:
            self.notify = Notification()
            self.notify.show()
            print('开始解压')
            filepath = self.dir_edit2.toPlainText()
            self.mythread = encode_thread(self.loadpath, filepath, ena_decode=True)  # 使能解压功能
            self.mythread.update_progress.connect(self.update_progress)  # 连接进度更新槽函数
            self.mythread.finished.connect(self.notice_finished)  # 任务完成信号连接槽函数
            try:
                self.mythread.start()  # 开始解压
            except:
                self.notify = Notification(message=True)
                self.notify.show()

    # 更换目录函数回调
    def change_directory(self):
        sender = self.sender()  # h获取信号发总者对象
        savepath = QFileDialog.getExistingDirectory(self, '选择路径', '.')  # 获取路径选择框输入的路径
        if savepath == '':
            print('\n取消选择')  # 选择为空直接退出
            return
        if sender.objectName() == 'btn_change_dir1':  # 如果来自按钮1，也就是压缩页面的信号
            filename1 = self.label_filename1.text().split('.')[0]  # 获取相应文件名
            if filename1 == '':
                filename1 = 'filename'
            self.dir_edit1.setPlainText(savepath + '/' + filename1 + '.huf')  # 生成压缩后的保存路径，并显示
        elif sender.objectName() == 'btn_change_dir2':  # 如果是来自解压页面，直接生成保存路径，并显示
            self.dir_edit2.setPlainText(savepath)
        print(savepath)
        print('更改目录')

    # 选择文件函数回调
    def select_file(self):
        sender = self.sender()  # 获取发送者对象
        filepath, _ = QFileDialog.getOpenFileName(self, '选择文件', '.', 'All Files(*);;Text Files(*.txt)')
        self.loadpath = filepath  # 保存文件读取路径
        if filepath == '':
            print('\n取消选择')
            return
        [filename, filetype] = (filepath.split('/')[-1]).split('.')  # 获得文件名和文件类型
        savepath = (filepath.split('.')[0]).replace(filename, '')  # 默认原文件所在文件路径作为保存路径
        if sender.objectName() == 'btn_select_file1':  # 来自页面1，也就是压缩
            self.label_filename1.setText(filename + '.' + filetype)  # 显示文件名
            self.dir_edit1.setPlainText(filepath.split('.')[0] + '.huf')  # 设置保存路径，并显示
        elif sender.objectName() == 'btn_select_file2':
            self.label_filename2.setText(filename + '.' + filetype)
            self.dir_edit2.setPlainText(savepath)
        # print(filepath)
        # print(filename)
        # print(filetype)
        # print('选择文件')


# 提示框对象
class Notification(QDialog):
    def __init__(self, message=False, text='文件或路径错误！'):
        super(Notification, self).__init__()  # message参数控制是进度加载提示框还是单纯的文本提示框，text用于设置文本提示框的内容
        self.message = message
        if message:  # 如果是文本提示框
            self.setupUi_message(text)  # 进行文本提示框的初始化
        else:
            self.setupUi()  # 进行进度加载提示框的初始化

    def setupUi(self):  # 进度加载提示框初始化
        self.setWindowTitle('正在努力工作...')
        self.setWindowIcon(QIcon(':/image/flower.ico'))
        self.setGeometry(0, 0, 300, 300)
        self.setFixedSize(300, 300)
        self.gif = QMovie(':/image/bgi2.gif')
        label = QLabel(self)  # 动图进度加载
        label.setMovie(self.gif)
        label.setFixedSize(300, 300)
        label.setScaledContents(True)
        label.setContentsMargins(0, 0, 0, 0)
        self.label = label
        proBar = QProgressBar(self)  # 进度条
        proBar.setObjectName('proBar')
        proBar.setGeometry(20, 260, 260, 15)
        proBar.setFixedSize(260, 15)
        proBar.setStyleSheet("text-align: center;")  # 进度条文本居中
        proBar.setValue(0)
        self.proBar = proBar
        self.gif.start()
        self.center()

    def setupUi_message(self, text):  # 文本消息提示框
        self.setWindowTitle('提示框')
        self.setWindowIcon(QIcon(':/image/flower.ico'))
        self.setGeometry(0, 0, 200, 75)
        self.setFixedSize(200, 75)
        label = QLabel(self)
        label.setFixedSize(200, 75)
        label.setText(text)
        label.setAlignment(Qt.AlignCenter)
        font = QtGui.QFont()
        font.setPointSize(14)  # 设置字体大小
        label.setFont(font)
        label.setScaledContents(True)
        label.setContentsMargins(0, 0, 0, 0)
        self.label = label
        self.center()

    def setMessage(self, str):  # 设置文本函数
        if self.message:  # 文本消息框被使能才能修改文本
            self.label.setText(str)
        else:
            return

    def setProgress(self, value):  # 设置进度条进度
        if self.message:
            return
        else:
            self.proBar.setValue(value)

    def center(self):  # 窗口居中函数
        screen = QDesktopWidget().screenGeometry()
        size = self.geometry()
        self.move((screen.width() - size.width()) / 2,
                  (screen.height() - size.height()) / 2)


class encode_thread(QThread):  # 子线程类
    update_progress = pyqtSignal(int)  # 向主线程发送当前进度信号
    finished = pyqtSignal()  # 向主线程发送任务完成的信号

    # 初始化参数，inputfile:件载入路径;outputfile:文件压缩完后的保存路径;ena_decode:是否使能编码功能
    def __init__(self, inputfile='.', outputfile='.', ena_decode=False):
        super(QThread, self).__init__()
        self.inputfile = inputfile
        self.outputfile = outputfile
        self.ena_decode = ena_decode

    def run(self):  # 子线程函数，子线程类只有该函数运行在子线程
        self.encoder = HuffmanEncoder()  # 实例化HuffmanEncoder()对象
        self.encoder.progress.connect(lambda x: self.update_progress.emit(x))  # 给HuffmanEncoder()对象的进度信号发送设置对应的槽函数
        if self.ena_decode:
            self.encoder.decodefile(inputfile=self.inputfile, outputfile=self.outputfile)
        else:
            self.encoder.encodefile(inputfile=self.inputfile, outputfile=self.outputfile)
        self.finished.emit()


if __name__ == "__main__":
    app = QApplication(sys.argv)
    main = Ui_MainWindow()
    main.show()
    sys.exit(app.exec_())
